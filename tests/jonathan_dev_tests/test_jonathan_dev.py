"""
pytest version of my tests. As of 2023-08-15 10:47:00 the old tests at "tests/jonathan_dev_tests/jonathan_dev_tests_main.p"y will need to be converted to pytest format.
"""

import pytest
from rainbow.agilent import ext_seq_metadata
import logging
from lxml import etree
import os
import rainbow as rb
logger = logging.getLogger(__name__)


@pytest.fixture
def d_dir():
    """
    A sample .D file for testing.
    """
    d_dir_path = "/Users/jonathan/mycode/python_code/rainbow/tests/jonathan_dev_tests/test_lib_descs/094.D"
    assert os.path.isdir(d_dir_path)
    return d_dir_path

@pytest.fixture
def acq_macaml(d_dir):
    """
    Returns test file acq_macaml path from d_dir root
    """
    return os.path.join(d_dir, "acq.macaml")

@pytest.fixture
def seq_acam_(d_dir):
    """
    Returns test file seq.acam_ path from d_dir root
    """
    return os.path.join(d_dir, "sequence.acam_")

def test_xpath(acq_macaml):
    """
    test whether the given xpath can return a value. if that value is a list, check if all are full.
    """
    rel_xpath = "/MethodConfiguration/MethodDescription/Section/Section[1]/Section[2]/Parameter[2]/Value"
    tree = etree.parse(acq_macaml)
    root = tree.getroot()
    namespace = root.tag.split("}")[0].strip("{")
    ns = {"acaml": namespace}
    xpath_exp = ext_seq_metadata.xpath_factory(rel_xpath)
    
    result = root.xpath(xpath_exp, namespaces=ns)
    assert result
    
    if isinstance(result, list):
        for r in result:
            assert r

def test_acq_macaml(acq_macaml):
    """
    test extraction of acq.macaml data. Primarily a print test, not sophisticated enough to validate pot. contents
    """
    print("starting test")
    metadata = ext_seq_metadata.extract_acq_metadata(acq_macaml)
    assert metadata
    print(metadata)

def test_seq_acam_(seq_acam_):
    """
    test extraction of seq.acam_ data. Primarily a print test, not sophisticated enough to validate pot. contents
    """
    print(f"filepath: {seq_acam_}")
    metadata = ext_seq_metadata.extract_sequence_metadata(seq_acam_)
    print(metadata)
    assert metadata
    
@pytest.fixture
def chemstation_metadata():
    return {'vendor': 'Agilent', 'date': '04-Apr-23, 12:03:16', 'inj_vol_ul': '10.00', 'seq_name': '2023-04-04_WINES_2023-04-04_12-01-53', 'seq_desc': None, 'vialnum': 'Vial 1', 'originalfilepath': 'C:\\CHEM32\\1\\DATA\\0_JONO_DATA\\2023-04-04_WINES_2023-04-04_12-01-53', 'id': '1c8ddfe0-e0c2-41d3-a20d-530454cf0f3f', 'desc': '21 le macchiole bolgheri rosso', 'notebook': '94', 'method': 'AVANTOR100X4_6C18-H2O-MEOH-2_5.M', 'unit': 'mAU', 'signal': 'DAD1I, DAD: Spectrum'}
    
def test_rainbow_metadata(d_dir, chemstation_metadata):
    """
    test whether the metadata generated by rb.read + .get_file().metadata equals a predefined dict of metadata.
    """
    datadir = rb.read(d_dir)
    uv_file = datadir.get_file("DAD1.UV")
    metadata = {**datadir.metadata, **uv_file.metadata}
    assert metadata == chemstation_metadata